{
  "scopeName": "source.lcb",
  "name": "LiveCode Builder",
  "fileTypes": [
    "lcb"
  ],
  "patterns": [
    {
      "include": "#comment-line"
    },
    {
      "include": "#comment-block"
    },
    {
      "include": "#string"
    },
    {
      "include": "#if"
    },
    {
      "include": "#repeat-block"
    },
    {
      "match": "\\s*(next|exit|end)\\s*repeat\\b",
      "name": "keyword.control.repeat.lcb"
    },
    {
      "include": "#end-block"
    },
    {
      "include": "#define-module"
    },
    {
      "include": "#define-constant"
    },
    {
      "include": "#define-metadata"
    },
    {
      "include": "#define-property"
    },
    {
      "include": "#define-variable"
    },
    {
      "include": "#define-handler"
    },
    {
      "include": "#handler-return"
    },
    {
      "include": "#brackets"
    },
    {
      "match": "\\b(true|false|nothing|undefined|any|the\\s*empty\\s*(array|list|string|data))\\b",
      "captures": {
        "1": {
          "name": "constant.language.core.lcb"
        }
      }
    },
    {
      "match": "\\b([tpsmxr][A-Z]\\w*)\\b",
      "captures": {
        "1": {
          "name": "variable.lcb"
        }
      }
    },
    {
      "match": "\\b(k[A-Z]\\w*)\\b",
      "captures": {
        "1": {
          "name": "variable.other.constant.lcb"
        }
      }
    },
    {
      "match": "\\b(returns)\\b",
      "captures": {
        "1": {
          "name": "storage.modifier.returns.lcb"
        }
      }
    },
    {
      "match": "\\b(Number|Integer|Real|Boolean|String|List|Array)\\b",
      "captures": {
        "1": {
          "name": "support.type.core.lcb"
        }
      }
    }
  ],
  "repository": {
    "comment-line": {
      "begin": "--|//",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.double-dash.lcb"
        }
      },
      "end": "\\n",
      "name": "comment.line.lcb"
    },
    "comment-block": {
      "begin": "/\\*",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.lcb"
        }
      },
      "end": "\\*/",
      "name": "comment.block.lcb"
    },
    "string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.lcb"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.lcb"
        }
      },
      "name": "string.quoted.double.lcb"
    },
    "if": {
      "begin": "^\\s*(else\\s*if|if|else)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.if.lcb"
        }
      },
      "end": "\\b(then)\\b",
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "end-block": {
      "match": "^\\s*(end(?:\\s*(?:module|library|widget|handler|if|repeat))?)",
      "name": "keyword.control.end.lcb"
    },
    "repeat-block": {
      "match": "^\\s*(repeat)\\b",
      "name": "keyword.control.repeat.lcb"
    },
    "define-module": {
      "match": "^\\s*(module|library|widget|use)(\\s+(?:\\w|[._])*)?\\b",
      "captures": {
        "1": {
          "name": "keyword.other.module.lcb"
        },
        "2": {
          "name": "entity.name.module.lcb"
        }
      }
    },
    "define-constant": {
      "begin": "^\\s*constant\\b",
      "end": "\\bis\\b",
      "captures": {
        "0": {
          "name": "storage.type.constant.lcb"
        }
      },
      "patterns": [
        {
          "match": "\\b\\w+\\b",
          "name": "variable.other.constant.lcb"
        }
      ]
    },
    "define-metadata": {
      "begin": "^\\s*metadata\\b",
      "end": "\\bis\\b",
      "captures": {
        "0": {
          "name": "storage.type.metadata.lcb"
        }
      },
      "patterns": [
        {
          "match": "\\b\\w+\\b",
          "name": "entity.name.metadata.lcb"
        }
      ]
    },
    "define-property": {
      "match": "^\\s*(property)(\\s*\\w*)?",
      "captures": {
        "1": {
          "name": "storage.type.property.lcb"
        },
        "2": {
          "name": "entity.name.property.lcb"
        }
      }
    },
    "define-variable": {
      "match": "^\\s*((?:public|private)\\s+)?(variable)(?:\\s+(\\w*)(?:\\s+(as(?:\\soptional)?)(?:\\s+(\\w*))?)?)?",
      "captures": {
        "1": {
          "name": "storage.modifier.access.lcb"
        },
        "2": {
          "name": "storage.type.var.lcb"
        },
        "3": {
          "name": "variable.lcb"
        },
        "4": {
          "name": "keyword.other.as.lcb"
        },
        "5": {
          "name": "entity.name.type.lcb"
        }
      }
    },
    "define-handler": {
      "match": "^\\s*((?:public|private)\\s+)?(handler)(?:\\s+(\\w+))\\b",
      "captures": {
        "1": {
          "name": "storage.modifier.access.lcb"
        },
        "2": {
          "name": "storage.type.function.lcb"
        },
        "3": {
          "name": "entity.name.function.lcb"
        }
      }
    },
    "handler-return": {
      "match": "^\\s*return\\b",
      "name": "keyword.control.lcb"
    }
  }
}