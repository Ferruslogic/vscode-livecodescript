<?livecode

local sErrorsList
local sLastLine
local sTempFile

Lint

command Lint
   local tScope, tLCCompile, tModulePaths, theArgument, tFilename, tLCIDirectory, tFilePath
   local tIndex
   repeat for each element theArgument in the commandArguments
      split theArgument with "="
      switch theArgument[1]
         case "-scope"
            put theArgument[2] into tScope
            break
         case "-explicitVariables"
            
            set the explicitVariables to theArgument[2]
            break
         case "-modulepaths"
            split theArgument[2] with ";"
            repeat with tIndex = 1 to the number of elements in theArgument[2]
               replace "\\" with "/"  in theArgument[2][tIndex]
               replace "\" with "/"  in theArgument[2][tIndex]

               replace quote with empty in theArgument[2][tIndex]
               if the last char of  theArgument[2][tIndex] is "/" then delete the last char of  theArgument[2][tIndex]
               if there is a folder (theArgument[2][tIndex]) then
                  put " --modulepath " & quote & theArgument[2][tIndex] & quote after tModulePaths
               end if
            end repeat
            break
         case "-lcbCompilerPath"
            put theArgument[2] into tLCCompile
            break
         case "-filepath"
			

            //set the itemDelimiter to slash

            put theArgument[2] into tFilePath
            replace "\" with "/" in tFilePath
            //put item -1 of tFilePath into tFilename
            --put item 1 to -2 of tFilePath & "/.lci" into tLCIDirectory
            --put " --modulepath " & tLCIDirectory before tModulePaths
            set the itemDelimiter to comma
            break
      end switch
   end repeat
   
   
   if tFilePath is empty then
	   	read from stdin until empty
	   	local tScript
	   	put it into tScript

	   	 if tScript is empty then 
		   	writeToSTDOUT ""
		   	quit
		end if
	else if  there is not  a file tFilePath then

		writeToSTDOUT ""
		quit
   end if
 

	
 	
	 
	

   put the scriptParsingErrors into sErrorsList
   split sErrorsList with return
   
   
   create script only stack "TestScript"
   local tErrors
   switch tScope
      case ".source.livecodescript"
         local tLineOffset = 0
         
         -- check for script only
         if word 1 of tScript is "script" then
            put 1 into tLineOffset
         end if
         
         if tLineOffset is 1 then
            delete line 1 of tScript
         end if
         
         
         set the script of stack "TestScript" to tScript
         put the result into tErrors
         split tErrors with return
         repeat with tIndex = 1 to the number of elements in tErrors
            if tErrors[tIndex] is not empty then
               split tErrors[tIndex] with ","
               local tMessage
               put sErrorsList[tErrors[tIndex][1]] into tMessage
               if tMessage is not empty then
                  if tErrors[tIndex][4] is not empty then
                     put " (" & item 4 of tErrors[tIndex][4] & ")" after tMessage
                  end if
                 
					writeToSTDOUT ("Parse error: " & tMessage & " in " & tErrors[tIndex][2] + tLineOffset & " on line " &   tErrors[tIndex][2] + tLineOffset )
               end if
            end if
         end repeat
         break
      case ".source.iRev"
         -- can't lint a whole web app...
         replace "include" with "# include" in tScript
         replace "require" with "# require" in tScript
         -- ensure it throws an error so it's not exectuted
         put return & quote after tScript
         put the number of lines of tScript into sLastLine
         SaveToTempFile tScript
         include sTempFile
         break
      case ".source.lcb"
 			local tCommand	                 
         if there is not a folder tLCIDirectory then
            create folder tLCIDirectory
         end if
         
 	
        
         if tFilePath is empty then
        	 SaveToTempFile tScript
        else 
        	put tFilePath into sTempFile
     	end if
         put ensureQuoted( tLCCompile) & (" --interface " & ensureQuoted(sTempFile & ".lci")) & tModulePaths & " -- " & ensureQuoted(sTempFile) into  tCommand

         
         --replace quote with empty in tLCCompile
         
         
        put  getCompileLCBFileAndReturnResult( tLCCompile, sTempFile, sTempFile & ".lci", tModulePaths) into tErrors

        -- put shell(tCommand ) into tErrors
         

		   if tErrors is empty then 
		   	writeToSTDOUT ""
		   	DeleteTempFile
		   	quit
		   end if
         
         
         split tErrors with return
         repeat with tIndex = 1 to the number of elements of tErrors
            
            if the platform is "Win32" and char 2 to 3 of tErrors[tIndex] is ":/" then
                 if  tErrors[tIndex] is not empty then 
               split tErrors[tIndex] with ":"
               
                writeToSTDOUT  ("Parse error: " & tErrors[tIndex][6] & " in " & tErrors[tIndex][2]  & " on line " &   tErrors[tIndex][3]  )

               end if
            else
               if  tErrors[tIndex] is not empty then 
                 split tErrors[tIndex] with ":"
                
                writeToSTDOUT  ("Parse error: " & tErrors[tIndex][5] & " in " & tErrors[tIndex][1]  & " on line " &   tErrors[tIndex][2] )
               end if
            end if
            
            
         end repeat
         DeleteTempFile
         break
   end switch
  
   writeToSTDOUT ""
   
   
end Lint


private function getCompileLCBFileAndReturnResult pCompiler, pFile, pInterface, pModulesPaths
     local tCommand
     put ensureQuoted(pCompiler) & (" --interface " & ensureQuoted(pInterface)) & pModulesPaths & " -- " & ensureQuoted(pFile) into  tCommand
     set the hideConsoleWindows to true
     return shell(tCommand ) 
end getCompileLCBFileAndReturnResult


-- Make sure is quoted and without leading spaces
function ensureQuoted pTarget
	if first char of pTarget is not quote then
		return quote & (word 1 to -1 of pTarget) & quote 
	else 
		return (word 1 to -1 of pTarget) 
	end if
end ensureQuoted


private command writeToSTDOUT pWhat
	if pWhat is empty then
		write linefeed to stdout
	else 
		write textencode(pWhat,"UTF-8" )  to stdout
		write linefeed to stdout
	end if
	
	
end writeToSTDOUT


command SaveToTempFile pScript
  put the temporary folder & slash & uuid() into sTempFile
  put pScript into url ("binfile:" & sTempFile)
end SaveToTempFile

command DeleteTempFile
	if tFilePath is empty then
  		delete file sTempFile
  		delete file sTempFile & ".lci"
	end if
end DeleteTempFile

command scriptExecutionError pStack, pFiles
   split pStack with return
   local tIndex
   repeat with tIndex = 2 to the number of elements in pStack
      if item 1 of pStack[tIndex] is 730 then
         exit repeat
      end if
      if item 2 of pStack[tIndex] is not 0 and item 2 of pStack[tIndex] is not sLastLine then
         local tMessage
         put sErrorsList[item 1 of pStack[tIndex]] into tMessage
         if tMessage is not empty then
            if item 4 of pStack[tIndex] is not empty then
               put " (" & item 4 of pStack[tIndex] & ")" after tMessage
            end if
            

                writeToSTDOUT  (item 2 of pStack[tIndex], item 3 of pStack[tIndex], tMessage)

         end if
      end if
   end repeat
   
   DeleteTempFile
   
   writeToSTDOUT ""
   
end scriptExecutionError